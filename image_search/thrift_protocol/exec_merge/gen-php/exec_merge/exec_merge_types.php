<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class TBOFQuantizeResult {
  static $_TSPEC;

  public $q = null;
  public $word_info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'q',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'word_info',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['q'])) {
        $this->q = $vals['q'];
      }
      if (isset($vals['word_info'])) {
        $this->word_info = $vals['word_info'];
      }
    }
  }

  public function getName() {
    return 'TBOFQuantizeResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->word_info = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->word_info []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TBOFQuantizeResult');
    if ($this->q !== null) {
      $xfer += $output->writeFieldBegin('q', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->q);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->word_info !== null) {
      if (!is_array($this->word_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('word_info', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->word_info));
        {
          foreach ($this->word_info as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExecMergeRequest {
  static $_TSPEC;

  public $img_qdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'img_qdata',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'TBOFQuantizeResult',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['img_qdata'])) {
        $this->img_qdata = $vals['img_qdata'];
      }
    }
  }

  public function getName() {
    return 'ExecMergeRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->img_qdata = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = 0;
              $val13 = new TBOFQuantizeResult();
              $xfer += $input->readI64($key12);
              $val13 = new TBOFQuantizeResult();
              $xfer += $val13->read($input);
              $this->img_qdata[$key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExecMergeRequest');
    if ($this->img_qdata !== null) {
      if (!is_array($this->img_qdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('img_qdata', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->img_qdata));
        {
          foreach ($this->img_qdata as $kiter14 => $viter15)
          {
            $xfer += $output->writeI64($kiter14);
            $xfer += $viter15->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExecMergeResponse {
  static $_TSPEC;

  public $ret_num = null;
  public $result = null;
  public $result_len = null;
  public $query_pow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_num',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'result_len',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'query_pow',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_num'])) {
        $this->ret_num = $vals['ret_num'];
      }
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['result_len'])) {
        $this->result_len = $vals['result_len'];
      }
      if (isset($vals['query_pow'])) {
        $this->query_pow = $vals['query_pow'];
      }
    }
  }

  public function getName() {
    return 'ExecMergeResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->result_len);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->query_pow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExecMergeResponse');
    if ($this->ret_num !== null) {
      $xfer += $output->writeFieldBegin('ret_num', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 2);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->result_len !== null) {
      $xfer += $output->writeFieldBegin('result_len', TType::I32, 3);
      $xfer += $output->writeI32($this->result_len);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query_pow !== null) {
      $xfer += $output->writeFieldBegin('query_pow', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->query_pow);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
