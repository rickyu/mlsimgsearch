/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef ExecMergeMsg_H
#define ExecMergeMsg_H

#include <TProcessor.h>
#include "exec_merge_types.h"



class ExecMergeMsgIf {
 public:
  virtual ~ExecMergeMsgIf() {}
  virtual void Merge(ExecMergeResponse& _return, const ExecMergeRequest& request) = 0;
};

class ExecMergeMsgNull : virtual public ExecMergeMsgIf {
 public:
  virtual ~ExecMergeMsgNull() {}
  void Merge(ExecMergeResponse& /* _return */, const ExecMergeRequest& /* request */) {
    return;
  }
};

typedef struct _ExecMergeMsg_Merge_args__isset {
  _ExecMergeMsg_Merge_args__isset() : request(false) {}
  bool request;
} _ExecMergeMsg_Merge_args__isset;

class ExecMergeMsg_Merge_args {
 public:

  ExecMergeMsg_Merge_args() {
  }

  virtual ~ExecMergeMsg_Merge_args() throw() {}

  ExecMergeRequest request;

  _ExecMergeMsg_Merge_args__isset __isset;

  void __set_request(const ExecMergeRequest& val) {
    request = val;
  }

  bool operator == (const ExecMergeMsg_Merge_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ExecMergeMsg_Merge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecMergeMsg_Merge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExecMergeMsg_Merge_pargs {
 public:


  virtual ~ExecMergeMsg_Merge_pargs() throw() {}

  const ExecMergeRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExecMergeMsg_Merge_result__isset {
  _ExecMergeMsg_Merge_result__isset() : success(false) {}
  bool success;
} _ExecMergeMsg_Merge_result__isset;

class ExecMergeMsg_Merge_result {
 public:

  ExecMergeMsg_Merge_result() {
  }

  virtual ~ExecMergeMsg_Merge_result() throw() {}

  ExecMergeResponse success;

  _ExecMergeMsg_Merge_result__isset __isset;

  void __set_success(const ExecMergeResponse& val) {
    success = val;
  }

  bool operator == (const ExecMergeMsg_Merge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ExecMergeMsg_Merge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecMergeMsg_Merge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExecMergeMsg_Merge_presult__isset {
  _ExecMergeMsg_Merge_presult__isset() : success(false) {}
  bool success;
} _ExecMergeMsg_Merge_presult__isset;

class ExecMergeMsg_Merge_presult {
 public:


  virtual ~ExecMergeMsg_Merge_presult() throw() {}

  ExecMergeResponse* success;

  _ExecMergeMsg_Merge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ExecMergeMsgClient : virtual public ExecMergeMsgIf {
 public:
  ExecMergeMsgClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ExecMergeMsgClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Merge(ExecMergeResponse& _return, const ExecMergeRequest& request);
  void send_Merge(const ExecMergeRequest& request);
  void recv_Merge(ExecMergeResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ExecMergeMsgProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ExecMergeMsgIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ExecMergeMsgProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_Merge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ExecMergeMsgProcessor(boost::shared_ptr<ExecMergeMsgIf> iface) :
    iface_(iface) {
    processMap_["Merge"] = &ExecMergeMsgProcessor::process_Merge;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ExecMergeMsgProcessor() {}
};

class ExecMergeMsgMultiface : virtual public ExecMergeMsgIf {
 public:
  ExecMergeMsgMultiface(std::vector<boost::shared_ptr<ExecMergeMsgIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ExecMergeMsgMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ExecMergeMsgIf> > ifaces_;
  ExecMergeMsgMultiface() {}
  void add(boost::shared_ptr<ExecMergeMsgIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Merge(ExecMergeResponse& _return, const ExecMergeRequest& request) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->Merge(_return, request);
        return;
      } else {
        ifaces_[i]->Merge(_return, request);
      }
    }
  }

};



#endif
