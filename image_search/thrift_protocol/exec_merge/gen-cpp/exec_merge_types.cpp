/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "exec_merge_types.h"



const char* TBOFQuantizeResult::ascii_fingerprint = "87131FDCF88ADB8D54FE4C4CAE331DBD";
const uint8_t TBOFQuantizeResult::binary_fingerprint[16] = {0x87,0x13,0x1F,0xDC,0xF8,0x8A,0xDB,0x8D,0x54,0xFE,0x4C,0x4C,0xAE,0x33,0x1D,0xBD};

uint32_t TBOFQuantizeResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q);
          this->__isset.q = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->word_info.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->word_info.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->word_info[_i4]);
            }
            iprot->readListEnd();
          }
          this->__isset.word_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TBOFQuantizeResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TBOFQuantizeResult");
  xfer += oprot->writeFieldBegin("q", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->q);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("word_info", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->word_info.size()));
    std::vector<std::string> ::const_iterator _iter5;
    for (_iter5 = this->word_info.begin(); _iter5 != this->word_info.end(); ++_iter5)
    {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ExecMergeRequest::ascii_fingerprint = "4FDC91E31793E434ABC36BDFE3689D04";
const uint8_t ExecMergeRequest::binary_fingerprint[16] = {0x4F,0xDC,0x91,0xE3,0x17,0x93,0xE4,0x34,0xAB,0xC3,0x6B,0xDF,0xE3,0x68,0x9D,0x04};

uint32_t ExecMergeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->img_qdata.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _ktype7;
            ::apache::thrift::protocol::TType _vtype8;
            iprot->readMapBegin(_ktype7, _vtype8, _size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              int64_t _key11;
              xfer += iprot->readI64(_key11);
              TBOFQuantizeResult& _val12 = this->img_qdata[_key11];
              xfer += _val12.read(iprot);
            }
            iprot->readMapEnd();
          }
          this->__isset.img_qdata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecMergeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExecMergeRequest");
  xfer += oprot->writeFieldBegin("img_qdata", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->img_qdata.size()));
    std::map<int64_t, TBOFQuantizeResult> ::const_iterator _iter13;
    for (_iter13 = this->img_qdata.begin(); _iter13 != this->img_qdata.end(); ++_iter13)
    {
      xfer += oprot->writeI64(_iter13->first);
      xfer += _iter13->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ExecMergeResponse::ascii_fingerprint = "E2BE2A55C86F2F05EC286F12668E31FA";
const uint8_t ExecMergeResponse::binary_fingerprint[16] = {0xE2,0xBE,0x2A,0x55,0xC8,0x6F,0x2F,0x05,0xEC,0x28,0x6F,0x12,0x66,0x8E,0x31,0xFA};

uint32_t ExecMergeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ret_num);
          this->__isset.ret_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->result_len);
          this->__isset.result_len = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->query_pow);
          this->__isset.query_pow = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecMergeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExecMergeResponse");
  xfer += oprot->writeFieldBegin("ret_num", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ret_num);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->result);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("result_len", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->result_len);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("query_pow", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->query_pow);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


