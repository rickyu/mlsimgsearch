/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef imgsearch_TYPES_H
#define imgsearch_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _ImageSearchRequest__isset {
  _ImageSearchRequest__isset() : type(false), key(false), workload(false) {}
  bool type;
  bool key;
  bool workload;
} _ImageSearchRequest__isset;

class ImageSearchRequest {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  ImageSearchRequest() : type(0), key(""), workload("") {
  }

  virtual ~ImageSearchRequest() throw() {}

  int32_t type;
  std::string key;
  std::string workload;

  _ImageSearchRequest__isset __isset;

  void __set_type(const int32_t val) {
    type = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_workload(const std::string& val) {
    workload = val;
  }

  bool operator == (const ImageSearchRequest & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(workload == rhs.workload))
      return false;
    return true;
  }
  bool operator != (const ImageSearchRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageSearchRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImageSearchResponse__isset {
  _ImageSearchResponse__isset() : return_code(false), img_data(false), img_data_len(false) {}
  bool return_code;
  bool img_data;
  bool img_data_len;
} _ImageSearchResponse__isset;

class ImageSearchResponse {
 public:

  static const char* ascii_fingerprint; // = "52C6DAB6CF51AF617111F6D3964C6503";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xC6,0xDA,0xB6,0xCF,0x51,0xAF,0x61,0x71,0x11,0xF6,0xD3,0x96,0x4C,0x65,0x03};

  ImageSearchResponse() : return_code(0), img_data(""), img_data_len(0) {
  }

  virtual ~ImageSearchResponse() throw() {}

  int32_t return_code;
  std::string img_data;
  int32_t img_data_len;

  _ImageSearchResponse__isset __isset;

  void __set_return_code(const int32_t val) {
    return_code = val;
  }

  void __set_img_data(const std::string& val) {
    img_data = val;
  }

  void __set_img_data_len(const int32_t val) {
    img_data_len = val;
  }

  bool operator == (const ImageSearchResponse & rhs) const
  {
    if (!(return_code == rhs.return_code))
      return false;
    if (!(img_data == rhs.img_data))
      return false;
    if (!(img_data_len == rhs.img_data_len))
      return false;
    return true;
  }
  bool operator != (const ImageSearchResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageSearchResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
