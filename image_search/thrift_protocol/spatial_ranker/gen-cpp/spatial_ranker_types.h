/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef spatial_ranker_TYPES_H
#define spatial_ranker_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _SpatialRankerRequest__isset {
  _SpatialRankerRequest__isset() : keypoints(false), descriptors(false), pics(false) {}
  bool keypoints;
  bool descriptors;
  bool pics;
} _SpatialRankerRequest__isset;

class SpatialRankerRequest {
 public:

  static const char* ascii_fingerprint; // = "AC78B4818B88D315545386C8B05969BB";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0x78,0xB4,0x81,0x8B,0x88,0xD3,0x15,0x54,0x53,0x86,0xC8,0xB0,0x59,0x69,0xBB};

  SpatialRankerRequest() : keypoints(""), descriptors("") {
  }

  virtual ~SpatialRankerRequest() throw() {}

  std::string keypoints;
  std::string descriptors;
  std::vector<int64_t>  pics;

  _SpatialRankerRequest__isset __isset;

  void __set_keypoints(const std::string& val) {
    keypoints = val;
  }

  void __set_descriptors(const std::string& val) {
    descriptors = val;
  }

  void __set_pics(const std::vector<int64_t> & val) {
    pics = val;
  }

  bool operator == (const SpatialRankerRequest & rhs) const
  {
    if (!(keypoints == rhs.keypoints))
      return false;
    if (!(descriptors == rhs.descriptors))
      return false;
    if (!(pics == rhs.pics))
      return false;
    return true;
  }
  bool operator != (const SpatialRankerRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpatialRankerRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SpatialSimilar__isset {
  _SpatialSimilar__isset() : picid(false), sim(false) {}
  bool picid;
  bool sim;
} _SpatialSimilar__isset;

class SpatialSimilar {
 public:

  static const char* ascii_fingerprint; // = "056BD45B5249CAA453D3C7B115F349DB";
  static const uint8_t binary_fingerprint[16]; // = {0x05,0x6B,0xD4,0x5B,0x52,0x49,0xCA,0xA4,0x53,0xD3,0xC7,0xB1,0x15,0xF3,0x49,0xDB};

  SpatialSimilar() : picid(0), sim(0) {
  }

  virtual ~SpatialSimilar() throw() {}

  int64_t picid;
  double sim;

  _SpatialSimilar__isset __isset;

  void __set_picid(const int64_t val) {
    picid = val;
  }

  void __set_sim(const double val) {
    sim = val;
  }

  bool operator == (const SpatialSimilar & rhs) const
  {
    if (!(picid == rhs.picid))
      return false;
    if (!(sim == rhs.sim))
      return false;
    return true;
  }
  bool operator != (const SpatialSimilar &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpatialSimilar & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SpatialRankerResponse__isset {
  _SpatialRankerResponse__isset() : result(false) {}
  bool result;
} _SpatialRankerResponse__isset;

class SpatialRankerResponse {
 public:

  static const char* ascii_fingerprint; // = "716540467DF4D3A297965A5FF7A1AB34";
  static const uint8_t binary_fingerprint[16]; // = {0x71,0x65,0x40,0x46,0x7D,0xF4,0xD3,0xA2,0x97,0x96,0x5A,0x5F,0xF7,0xA1,0xAB,0x34};

  SpatialRankerResponse() {
  }

  virtual ~SpatialRankerResponse() throw() {}

  std::vector<SpatialSimilar>  result;

  _SpatialRankerResponse__isset __isset;

  void __set_result(const std::vector<SpatialSimilar> & val) {
    result = val;
  }

  bool operator == (const SpatialRankerResponse & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SpatialRankerResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpatialRankerResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
