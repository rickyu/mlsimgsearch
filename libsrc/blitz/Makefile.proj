#需要输出 的变量
# BASE : 工程在整个svn中的位置，用于依赖其他模块.
# MODULE_DEPENDS : 依赖svn中的其他模块.
# LIBS : 需要链接哪些库. -lxxx -lxxx
# PROJ_INCLUDE : 
# SOURCES : 所有的源文件.
# OUTPUT : 所有产出, 用于clean
# TEST_PROGRAMS :所有测试程序.
# SMOKE_PROGRAMS : 冒烟测试程序.
#
# 输出的规则: all

BASE := ../..
COMPONENTS := ../

LDFLAGS+=-L/usr/local/lib/mysql -L/usr/local/lib
LIBS=-lutils -levent -lthrift  -lhiredis -lmysqlclient -lboost_thread -lboost_system
PROJ_INCLUDE=-I./include -I$(GTEST_DIR)/include -I/usr/local/include/mysql -I/usr/local/include/thrift
#=========================================================================
OUTPUT_PATH ?= output
lib_dir = $(OUTPUT_PATH)/lib
.PHONY: all
all: $(lib_dir)/libblitz.a
	if [ ! -d $(OUTPUT_PATH) ]; then mkdir $(OUTPUT_PATH); fi
	if [ ! -d $(OUTPUT_PATH)/lib ]; then mkdir $(OUTPUT_PATH)/lib; fi
	if [ ! -d $(OUTPUT_PATH)/include ]; then mkdir $(OUTPUT_PATH)/include; fi
	cd include;find . -name "*.h" -print | xargs -n 1 echo | cpio -p -d --quiet ../$(OUTPUT_PATH)/include

OUTPUT += $(lib_dir)/libblitz.a
.PHONY : lint
lint:
	cppcheck -I include/blitz src/ ut/ example/ 
	find . -name *.cc -o -name *.h | xargs -I {} cpplint.py {}

lib_sources = $(wildcard src/*.cc)
lib_objs = $(patsubst %.cc,%.o,$(lib_sources))
$(lib_dir)/libblitz.a: $(lib_objs)
	[ -d $(lib_dir) ] ||  mkdir -p $(lib_dir)
	$(AR) $(ARFLAGS) $@ $^


# =================测试相关文件=====
UT_PROGRAMS = buffer_ut \
     line_msg_ut \
     state_machine_ut \
     framework_ut \
     ref_object_ut  \
     array_list_ut 

SMOKE_PROGRAMS = buffer_ut
OUTPUT += $(UT_PROGRAMS) gtest.a gtest_main.o gtest_main.a
all: $(UT_PROGRAMS)
SOURCES = $(lib_sources) $(TEST_SOURCES)

TEST_SOURCES = $(wildcard ut/*.cc)

$(UT_PROGRAMS) : % : ut/%.o $(lib_objs) gtest_main.a
	$(CXX) $(LDFLAGS) $^ -o $@ $(LIBS)

GTEST_DIR = $(COMPONENTS)/gtest-1.7.0
# GTEST_DIR = /home/rick/third
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc
gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^
gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^


